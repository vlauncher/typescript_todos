---
openapi: 3.0.0
info:
  title: Express Todos API
  version: 1.0.0
  description: API documentation for the Express Todos app
servers:
  - url: http://localhost:5000
paths:
  /api/auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful, verification email sent
        '400':
          description: User already exists
  /api/auth/verify/{token}:
    get:
      summary: Verify user email
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email verification successful
        '400':
          description: Invalid or expired link
  /api/auth/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid credentials
  /api/auth/forgot-password:
    post:
      summary: Send password reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset link sent
        '400':
          description: User not found
  /api/auth/reset-password/{token}:
    post:
      summary: Reset user password
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid or expired link
  /api/auth/refresh-token:
    post:
      summary: Refresh JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid refresh token
  /api/todos:
    get:
      summary: Get all todos for the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
    post:
      summary: Create a new todo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTodoRequest'
      responses:
        '201':
          description: Todo created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
  /api/todos/{id}:
    put:
      summary: Update a todo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTodoRequest'
      responses:
        '200':
          description: Todo updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          description: Todo not found
    delete:
      summary: Delete a todo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Todo deleted
        '404':
          description: Todo not found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterRequest:
      type: object
      required: [first_name, last_name, email, password]
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
        password:
          type: string
    ForgotPasswordRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
    ResetPasswordRequest:
      type: object
      required: [password]
      properties:
        password:
          type: string
    RefreshTokenRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken:
          type: string
    AuthResponse:
      type: object
      properties:
        access:
          type: string
        refresh:
          type: string
    Todo:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        completed:
          type: boolean
        archived:
          type: boolean
        priority:
          type: string
          enum:
            - low
            - medium
            - high
        user:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateTodoRequest:
      type: object
      required: [title]
      properties:
        title:
          type: string
        description:
          type: string
        archived:
          type: boolean
        priority:
          type: string
          enum:
            - low
            - medium
            - high
    UpdateTodoRequest:
      type: object
      properties:
        title:
          type: string
        completed:
          type: boolean
        description:
          type: string
        archived:
          type: boolean
        priority:
          type: string
          enum:
            - low
            - medium
            - high
